version: '3.8'

services:
  postgres:
    image: postgres:16.3-alpine
    container_name: permafrost-postgres
    environment:
      POSTGRES_DB: permafrost
      POSTGRES_USER: permafrost
      POSTGRES_PASSWORD: dev_password_change_in_prod
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U permafrost"]
      interval: 10s
      timeout: 5s
      retries: 5

  nats:
    image: nats:2.10.14-alpine
    container_name: permafrost-nats
    ports:
      - "4222:4222"
      - "8222:8222"
    command: ["-js", "-m", "8222"]
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: permafrost-backend
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgres://permafrost:dev_password_change_in_prod@postgres:5432/permafrost?sslmode=disable
      - NATS_URL=nats://nats:4222
      - PORT=8080
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_healthy
    volumes:
      - ./backend:/app
    working_dir: /app

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: permafrost-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NODE_ENV=development
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    working_dir: /app

volumes:
  postgres_data:

networks:
  default:
    name: permafrost-network
